input1 = "3+2*2"
input2 = "3/2"
input3 = "3+5/2"
input4 = "3*3+2*4"
input5 = "3-4-2"

def priority(op)
	if op == "+" || op == "-" then
		return 1
	else
		return 2
	end
end

//transform from infix expr to postfix expr
def calculate(s)
	local output = ""
	local stack = {top = 0}
	stack.push = def (v) stack[stack.top] = v stack.top = stack.top + 1 end
	stack.pop = def () stack.top = stack.top - 1 return stack[stack.top] end
	stack.peek = def () return stack[stack.top - 1] end

	local len = #s
	for local i = 0, i < len, i += 1 do
		local char = string.at(s, i)
		
		if char == " " then
			continue
		elif char != "+" && char != "-" && char != "*" && char != "/" then
			output += char
		else
			while stack.top != 0 do
				local top = stack.peek()
				if priority(top) >= priority(char) then
					output += stack.pop()
				else
					break
				end
			end
			
			stack.push(char)
		end
	end

	while stack.top != 0 do
		output += stack.pop()
	end

	return output
end

//eval postfix expr
def evalRPN(token)
	local stack = {}
	local stackPtr = 0
	local len = #token
	local final = 0
	local i
	for i = 0, i < len, i += 1 do
		local p = string.at(token, i)
		if p == "+" then
			final =  stack[stackPtr - 2] + stack[stackPtr - 1]
		elif p == "-" then
			final =  stack[stackPtr - 2] - stack[stackPtr - 1]
		elif p == "*" then
			final =  stack[stackPtr - 2] * stack[stackPtr - 1]
		elif p == "/" then
			final =  stack[stackPtr - 2] / stack[stackPtr - 1]
		else
			stack[stackPtr] = toint(p)
			stackPtr += 1
			continue
		end

		stackPtr -= 2
		stack[stackPtr] = final
		stackPtr += 1
	end

	return final
end

print(evalRPN(calculate(input1)))
print(evalRPN(calculate(input2)))
print(evalRPN(calculate(input3)))
print(evalRPN(calculate(input4)))
print(evalRPN(calculate(input5)))