input1 = {"0" = {"0" = 1, "1" = 3, "2" = 1},
		  "1" = {"0" = 1, "1" = 5, "2" = 1},
		  "2" = {"0" = 4, "1" = 2, "2" = 1}}

input2 = {"0" = {"0" = 2, "1" = 5, "2" = 1},
		  "1" = {"0" = 2, "1" = 3, "2" = 1}}

min = 65536
def recurse(grid, x, y, sum)
	if x == 0 && y == 0 then
		sum += grid[0][0]
		if min > sum then
			min = sum
		end

		return
	end

	local t = grid[y][x]
	if x == 0 then
		recurse(grid, 0, y - 1, sum + t)
	elif y == 0 then
		recurse(grid, x - 1, 0, sum + t)
	else
		recurse(grid, x, y - 1, sum + t)
		recurse(grid, x - 1, y, sum + t)
	end
end

def minPathSum(grid)
	min = 65536
	local w = #grid[0]
	local h = #grid
	recurse(grid, w - 1, h - 1, 0)
	return min
end

def minPathSum_dp(grid)
	local w = #grid[0]
	local h = #grid
	local dp = {}
	local i
	local j
	for i = 0, i < h, i += 1 do
		dp[i] = {}
	end

	for i = h - 1, i >= 0, i -= 1 do
		for j = w - 1, j >= 0, j -= 1 do
			if i == h - 1 && j != w - 1 then
				dp[i][j] = grid[i][j] + dp[i][j + 1]
			elif j == w - 1 && i != h - 1 then
				dp[i][j] = grid[i][j] + dp[i + 1][j]
			elif j != w - 1 && i != w - 1 then
				dp[i][j] = grid[i][j] + math.min(dp[i + 1][j], dp[i][j + 1])
			else
				dp[i][j] = grid[i][j]
			end
		end
	end

	return dp[0][0]
end

print(minPathSum(input1))
print(minPathSum_dp(input1))
print("-----------------")
print(minPathSum(input2))
print(minPathSum_dp(input2))